{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file:///Users/markhong/creative-project-520521/lib/supabaseBrowserClient.ts"],"sourcesContent":["'use client'\n\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n  {\n    auth: {\n      persistSession: true,\n      storage: typeof window !== 'undefined' ? localStorage : undefined,\n    },\n  }\n)\n\nexport default supabase\n"],"names":[],"mappings":";;;AAEA;AAFA;;AAIA,MAAM,WAAW,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,sUAG1B;IACE,MAAM;QACJ,gBAAgB;QAChB,SAAS,6EAA+C;IAC1D;AACF;uCAGa","debugId":null}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///Users/markhong/creative-project-520521/app/loggedIn.tsx"],"sourcesContent":["'use client'\n\nimport { useEffect, useState } from 'react'\nimport { usePathname, useRouter } from 'next/navigation'\nimport supabase from '@/lib/supabaseBrowserClient'\n\nexport default function AuthGuard({ children }: { children: React.ReactNode }) {\n  const [loading, setLoading] = useState(true)\n  const router = useRouter()\n  const pathname = usePathname()\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      const { data } = await supabase.auth.getSession()\n      const isLoggedIn = !!data.session\n      const isLoginPage = pathname.startsWith('/login')\n\n      if (!isLoggedIn && !isLoginPage) {\n        router.replace('/login')\n      } else {\n        setLoading(false)\n      }\n    }\n\n    checkAuth()\n  }, [pathname, router])\n\n  if (loading) {\n    return <div className=\"p-6 text-center\">Checking authentication...</div>\n  }\n\n  return <>{children}</>\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAMe,SAAS,UAAU,EAAE,QAAQ,EAAiC;IAC3E,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,WAAW,CAAA,GAAA,kIAAA,CAAA,cAAW,AAAD;IAE3B,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,YAAY;YAChB,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,4HAAA,CAAA,UAAQ,CAAC,IAAI,CAAC,UAAU;YAC/C,MAAM,aAAa,CAAC,CAAC,KAAK,OAAO;YACjC,MAAM,cAAc,SAAS,UAAU,CAAC;YAExC,IAAI,CAAC,cAAc,CAAC,aAAa;gBAC/B,OAAO,OAAO,CAAC;YACjB,OAAO;gBACL,WAAW;YACb;QACF;QAEA;IACF,GAAG;QAAC;QAAU;KAAO;IAErB,IAAI,SAAS;QACX,qBAAO,8OAAC;YAAI,WAAU;sBAAkB;;;;;;IAC1C;IAEA,qBAAO;kBAAG;;AACZ","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///Users/markhong/creative-project-520521/app/themeProvider.tsx"],"sourcesContent":["'use client'\nimport { createContext, useEffect, useState, useContext } from 'react'\n\nconst ThemeContext = createContext({\n  isDark: false,\n  toggle: () => {},\n})\n\nexport const useTheme = () => useContext(ThemeContext)\n\nexport const ThemeProvider = ({ children }: { children: React.ReactNode }) => {\n  const [isDark, setIsDark] = useState(false)\n\n  useEffect(() => {\n    document.documentElement.classList.toggle('dark', isDark)\n  }, [isDark])\n\n  const toggle = () => setIsDark((d) => !d)\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggle }}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}"],"names":[],"mappings":";;;;;AACA;AADA;;;AAGA,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAAE;IACjC,QAAQ;IACR,QAAQ,KAAO;AACjB;AAEO,MAAM,WAAW,IAAM,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;AAElC,MAAM,gBAAgB,CAAC,EAAE,QAAQ,EAAiC;IACvE,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAErC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,SAAS,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ;IACpD,GAAG;QAAC;KAAO;IAEX,MAAM,SAAS,IAAM,UAAU,CAAC,IAAM,CAAC;IAEvC,qBACE,8OAAC,aAAa,QAAQ;QAAC,OAAO;YAAE;YAAQ;QAAO;kBAC5C;;;;;;AAGP","debugId":null}}]
}