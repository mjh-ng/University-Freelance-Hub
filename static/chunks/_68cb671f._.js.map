{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/markhong/creative-project-520521/lib/supabaseBrowserClient.ts"],"sourcesContent":["'use client'\n\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n  {\n    auth: {\n      persistSession: true,\n      storage: typeof window !== 'undefined' ? localStorage : undefined,\n    },\n  }\n)\n\nexport default supabase\n"],"names":[],"mappings":";;;AAKE;AAHF;AAFA;;AAIA,MAAM,WAAW,CAAA,GAAA,0LAAA,CAAA,eAAY,AAAD,sUAG1B;IACE,MAAM;QACJ,gBAAgB;QAChB,SAAS,uCAAgC;IAC3C;AACF;uCAGa","debugId":null}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":["file:///Users/markhong/creative-project-520521/app/_auth-handler.tsx"],"sourcesContent":["'use client'\n\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport supabase from '@/lib/supabaseBrowserClient'\n\nexport default function AuthHandler() {\n  const router = useRouter()\n\n  useEffect(() => {\n    const handleAuth = async () => { // handle the authentication process asynchronously\n      const hash = window.location.hash\n      const params = new URLSearchParams(hash.replace('#', '?'))\n\n      const accessToken = params.get('access_token') // the access token from the URL hash\n      const refreshToken = params.get('refresh_token') // the refresh token from the URL hash\n      const type = params.get('type') // the type of authentication, e.g., 'magiclink'\n\n      console.log('Access token:', accessToken)\n      console.log('Refresh token:', refreshToken)\n      console.log('Type:', type)\n\n      if (!accessToken || !refreshToken || type !== 'magiclink') { // check if the tokens and type are present/correct\n        console.warn('missing info â€” skipping session setup.')\n        return\n      }\n\n      const { error } = await supabase.auth.setSession({ // set the session with the access and refresh tokens\n        access_token: accessToken,\n        refresh_token: refreshToken,\n      })\n\n      if (error) {\n        console.error('setSession error:', error)\n      } else {\n        console.log('Session established successfully')\n        router.replace('/')\n      }\n    }\n\n    handleAuth()\n  }, [router])\n\n  return null\n}\n"],"names":[],"mappings":";;;AAEA;AACA;AACA;;AAJA;;;;AAMe,SAAS;;IACtB,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IAEvB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;iCAAE;YACR,MAAM;oDAAa;oBACjB,MAAM,OAAO,OAAO,QAAQ,CAAC,IAAI;oBACjC,MAAM,SAAS,IAAI,gBAAgB,KAAK,OAAO,CAAC,KAAK;oBAErD,MAAM,cAAc,OAAO,GAAG,CAAC,gBAAgB,qCAAqC;;oBACpF,MAAM,eAAe,OAAO,GAAG,CAAC,iBAAiB,sCAAsC;;oBACvF,MAAM,OAAO,OAAO,GAAG,CAAC,QAAQ,gDAAgD;;oBAEhF,QAAQ,GAAG,CAAC,iBAAiB;oBAC7B,QAAQ,GAAG,CAAC,kBAAkB;oBAC9B,QAAQ,GAAG,CAAC,SAAS;oBAErB,IAAI,CAAC,eAAe,CAAC,gBAAgB,SAAS,aAAa;wBACzD,QAAQ,IAAI,CAAC;wBACb;oBACF;oBAEA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,+HAAA,CAAA,UAAQ,CAAC,IAAI,CAAC,UAAU,CAAC;wBAC/C,cAAc;wBACd,eAAe;oBACjB;oBAEA,IAAI,OAAO;wBACT,QAAQ,KAAK,CAAC,qBAAqB;oBACrC,OAAO;wBACL,QAAQ,GAAG,CAAC;wBACZ,OAAO,OAAO,CAAC;oBACjB;gBACF;;YAEA;QACF;gCAAG;QAAC;KAAO;IAEX,OAAO;AACT;GAtCwB;;QACP,qIAAA,CAAA,YAAS;;;KADF","debugId":null}}]
}